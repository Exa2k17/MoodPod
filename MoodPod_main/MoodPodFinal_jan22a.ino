#include "arduino_secrets.h"
/*
  Sketch generated by the Arduino IoT Cloud Thing "MoodPodFinal"
  https://create.arduino.cc/cloud/things/151a6847-0850-47ae-a59c-0af06065e56d

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  int category;
  int clarityLevel;
  int clarityN;
  int clarityP;
  int healthLevel;
  int healthN;
  int healthP;
  int mentalityLevel;
  int mentalityN;
  int mentalityP;
  int privateLevel;
  int privateN;
  int privateP;
  int responsibilityLevel;
  int responsibilityN;
  int responsibilityP;
  int stressLevel;
  int vote;
  int votedN;
  int votedP;
  int workloadLevel;
  int workloadN;
  int workloadP;
  CloudSchedule scheduler;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"
#include <Wire.h>
#include "scheduleHandler.h"
#include "buttonHandler.h"


//declring pins for voting buttons
int buttonPinN = 7;
int buttonPinP = 8;




void setup() {
  delay(5000);
  // Initialize serial and wait for port to open:
  Serial.begin(9600);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500);

  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);

  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information youâ€™ll get.
     The default is 0 (only errors).
     Maximum is 4
  */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();

  //assinging state to pins used for buttons
  pinMode(buttonPinN, INPUT_PULLUP);
  pinMode(buttonPinP, INPUT_PULLUP);




}

//helper variable for intializing first question
bool once = true;

void loop() {
 
  //handling buttons presses
  handleButtons(buttonPinN, buttonPinP);
  //andling scheduler
  handleSchedule();


 //Ping slave mega to display intial next question
  if (once) {
    //transmitting command to show welcome screeen
    Wire.beginTransmission(4); // transmit to device #4
    byte b = 8;
    Wire.write(b);
    Wire.endTransmission();
    delay(10000);
    //transmitting command to display initial question
    Wire.beginTransmission(4); // transmit to device #4
    Wire.write(getQuestionCategory());
    Wire.endTransmission();
    category = random(0,6);
    incrementCategoryVotes();
    once = false;
  }
  

























  ArduinoCloud.update();


  delay(500);


}



/*
  Since Scheduler is READ_WRITE variable, onSchedulerChange() is
  executed every time a new value is received from IoT Cloud.
*/


void onSchedulerChange() {
  // Add your code here to act upon Scheduler change

}












